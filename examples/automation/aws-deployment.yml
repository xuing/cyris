# CyRIS AWS Cloud Deployment Example
# Demonstrates automated cloud infrastructure with AWS

# Cloud automation configuration
automation:
  enabled: true
  providers:
    - aws         # Primary cloud provider
    - packer      # For custom AMI creation
  
  # AWS-specific settings
  aws:
    region: "us-east-1"
    availability_zones:
      - "us-east-1a"
      - "us-east-1b"
    
    # Deployment method
    deployment_method: "terraform"  # or "direct"
    
    # Resource management
    auto_tag_resources: true
    resource_cleanup: true
    cost_optimization: true
    
    # Networking
    vpc:
      create_new: true
      cidr_block: "10.0.0.0/16"
      dns_hostnames: true
      dns_support: true
    
    # Security
    key_pair_name: "cyris-training-key"
    security_groups:
      - name: "cyris-web-sg"
        description: "Web server security group"
        rules:
          - protocol: "tcp"
            from_port: 80
            to_port: 80
            cidr_blocks: ["0.0.0.0/0"]
          - protocol: "tcp"
            from_port: 443  
            to_port: 443
            cidr_blocks: ["0.0.0.0/0"]
          - protocol: "tcp"
            from_port: 22
            to_port: 22
            cidr_blocks: ["10.0.0.0/16"]
            
      - name: "cyris-db-sg"
        description: "Database security group"
        rules:
          - protocol: "tcp"
            from_port: 3306
            to_port: 3306
            source_security_group: "cyris-web-sg"

# Host settings (cloud-adapted)
host_settings:
  - name: "aws-region-host"
    type: "cloud"  # Indicates cloud deployment
    automation:
      enabled: true
      provider: "aws"

# Guest settings (EC2 instances)
guest_settings:
  - name: "web-server"
    automation:
      provider: "aws"
      
      # Instance configuration
      instance_type: "t3.medium"
      ami_id: "ami-0c02fb55956c7d316"  # Amazon Linux 2
      
      # Custom AMI building (optional)
      build_custom_ami: false
      base_template: "amazon-linux-2"
      
      # SSH key management
      ssh_keys:
        - type: "rsa"
          public_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQ..."
      
      # Subnet and security
      subnet_type: "public"  # or "private"
      security_groups:
        - "cyris-web-sg"
        - "default"
        
      # Storage
      root_volume:
        size: 20
        type: "gp3"
        encrypted: true
        
      # Monitoring
      monitoring: true
      
      # User data (cloud-init)
      user_data: |
        #!/bin/bash
        yum update -y
        yum install -y httpd php mysql
        systemctl start httpd
        systemctl enable httpd
        
        # Create sample web page
        cat > /var/www/html/index.php << 'EOF'
        <?php
        echo "<h1>CyRIS Training Web Server</h1>";
        echo "<p>Instance ID: " . file_get_contents('http://169.254.169.254/latest/meta-data/instance-id') . "</p>";
        echo "<p>Region: " . file_get_contents('http://169.254.169.254/latest/meta-data/placement/region') . "</p>";
        phpinfo();
        ?>
        EOF
        
        # Configure firewall
        systemctl start firewalld
        systemctl enable firewalld
        firewall-cmd --permanent --add-service=http
        firewall-cmd --permanent --add-service=https
        firewall-cmd --reload
    
    # Resource tags
    tags:
      Environment: "training"
      Project: "cyris" 
      Purpose: "web-server"
      Owner: "cybersecurity-team"
      
  - name: "database-server"
    automation:
      provider: "aws"
      instance_type: "t3.large"
      ami_id: "ami-0c02fb55956c7d316"
      
      ssh_keys:
        - type: "rsa"
          public_key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQ..."
      
      subnet_type: "private"
      security_groups:
        - "cyris-db-sg"
        
      root_volume:
        size: 100
        type: "gp3"
        encrypted: true
        
      # Additional EBS volume for database
      additional_volumes:
        - device_name: "/dev/sdf"
          size: 200
          type: "gp3"
          encrypted: true
          mount_point: "/var/lib/mysql"
      
      user_data: |
        #!/bin/bash
        yum update -y
        yum install -y mysql-server
        
        # Format and mount additional volume
        mkfs.ext4 /dev/sdf
        mkdir -p /var/lib/mysql
        mount /dev/sdf /var/lib/mysql
        echo '/dev/sdf /var/lib/mysql ext4 defaults,nofail 0 2' >> /etc/fstab
        
        # Configure MySQL
        systemctl start mysqld
        systemctl enable mysqld
        
        # Secure installation (basic)
        mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'TrainingPass123!';"
        mysql -e "DELETE FROM mysql.user WHERE User='';"
        mysql -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
        mysql -e "DROP DATABASE IF EXISTS test;"
        mysql -e "FLUSH PRIVILEGES;"
    
    tags:
      Environment: "training"
      Project: "cyris"
      Purpose: "database-server" 
      Owner: "cybersecurity-team"

# Network topology (AWS VPC)
networks:
  - name: "training-vpc"
    type: "vpc"
    automation:
      provider: "aws"
    cidr_block: "10.0.0.0/16"
    
    subnets:
      - name: "public-subnet-1a"
        type: "public"
        availability_zone: "us-east-1a"
        cidr_block: "10.0.1.0/24"
        map_public_ip: true
        
      - name: "private-subnet-1a" 
        type: "private"
        availability_zone: "us-east-1a"
        cidr_block: "10.0.2.0/24"
        
      - name: "public-subnet-1b"
        type: "public"
        availability_zone: "us-east-1b"
        cidr_block: "10.0.3.0/24"
        map_public_ip: true
        
    # Internet Gateway
    internet_gateway: true
    
    # NAT Gateway for private subnets
    nat_gateway:
      enabled: true
      subnet: "public-subnet-1a"

# Clone settings (multi-instance deployment)
clone_settings:
  - name: "web-server-cluster"
    guest: "web-server"
    count: 2  # Deploy 2 web servers
    automation:
      provider: "aws"
      distribution_strategy: "multi-az"
      load_balancer:
        enabled: true
        type: "application"
        target_groups:
          - protocol: "HTTP"
            port: 80
            health_check_path: "/index.php"
    
    # Per-instance customization
    instance_customization:
      hostname_pattern: "web-server-{{ availability_zone }}-{{ instance_number }}"
      
    tasks:
      - name: "register-with-lb"
        type: "aws-cli"
        automation:
          method: "local"
        commands:
          - "aws elbv2 register-targets --target-group-arn {{ target_group_arn }} --targets Id={{ instance_id }}"
          
      - name: "configure-monitoring"
        type: "shell"
        automation:
          method: "ssh"
        commands:
          - "yum install -y amazon-cloudwatch-agent"
          - "systemctl enable amazon-cloudwatch-agent"
          - "systemctl start amazon-cloudwatch-agent"

  - name: "database-cluster"
    guest: "database-server"
    count: 1  # Single database instance
    automation:
      provider: "aws"
      backup:
        enabled: true
        retention_days: 7
        backup_window: "03:00-04:00"
    
    tasks:
      - name: "setup-replication"
        type: "shell"
        automation:
          method: "ssh"
          condition: "if count > 1"  # Only if multiple DB instances
        commands:
          - "# Configure MySQL replication"
          - "mysql -e \"GRANT REPLICATION SLAVE ON *.* TO 'replicator'@'%' IDENTIFIED BY 'ReplicatorPass123!';\""

# AWS-specific workflows
workflows:
  - name: "full-aws-deployment"
    description: "Complete AWS infrastructure deployment"
    steps:
      - name: "validate-aws-access"
        provider: "aws"
        action: "validate"
        
      - name: "create-vpc-infrastructure"
        provider: "aws"
        action: "deploy"
        targets: ["networks"]
        
      - name: "deploy-instances"
        provider: "aws"
        action: "deploy"  
        depends_on: ["create-vpc-infrastructure"]
        targets: ["guests"]
        
      - name: "configure-load-balancer"
        provider: "aws"
        action: "configure"
        depends_on: ["deploy-instances"]
        targets: ["web-server-cluster"]
        
      - name: "setup-monitoring"
        provider: "aws"
        action: "configure"
        depends_on: ["deploy-instances"]
        targets: ["all-instances"]

# Validation and testing (AWS-adapted)
validation:
  automation:
    enabled: true
    timeout: 2400  # 40 minutes for cloud deployment
    
  tests:
    - name: "instance-health-check"
      type: "aws-health"
      automation:
        method: "aws-cli"
      targets:
        - "all-instances"
        
    - name: "web-connectivity-test"
      type: "http"
      automation:
        method: "curl"
      targets:
        - "{{ web_server_public_ip }}"
        - "{{ load_balancer_dns_name }}"
        
    - name: "database-connectivity-test"
      type: "mysql"
      automation:
        method: "ssh"
        source_instance: "web-server"
      command: "mysql -h {{ database_private_ip }} -u root -pTrainingPass123! -e 'SELECT 1;'"

# Cost management
cost_management:
  automation:
    enabled: true
    
  # Automatic shutdown schedule
  shutdown_schedule:
    enabled: true
    weekdays: "18:00"  # 6 PM
    weekends: "17:00"  # 5 PM
    timezone: "America/New_York"
    
  # Cost alerts
  budgets:
    - name: "training-environment"
      amount: 100.00
      currency: "USD"
      period: "MONTHLY"
      alerts:
        - threshold: 80  # Alert at 80% of budget
          notification: "email@example.com"
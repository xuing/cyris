#!/usr/bin/env python3
"""
CyRIS Unified Entry Script
Automatically choose modern CLI or legacy interface based on arguments
"""
import sys
import os
from pathlib import Path

def main():
    """Main function"""
    # Write debug log to file
    with open('/home/ubuntu/cyris/debug_main.log', 'a') as f:
        f.write(f"\n[DEBUG] main() started with sys.argv: {sys.argv}\n")
        f.flush()
    
    args = sys.argv[1:]
    
    # If no arguments provided, show help
    if not args:
        print("CyRIS - Modern Cyber Security Training Environment Deployment Tool")
        print()
        print("Modern commands:")
        print("  cyris --help                    # Show modern CLI help")
        print("  cyris create <yaml_file>        # Create cyber range")
        print("  cyris list                      # List cyber ranges")
        print("  cyris destroy <id>              # Destroy cyber range")
        print("  cyris status <id>               # Show range status")
        print("  cyris validate                  # Validate environment")
        print()
        print("Legacy compatibility:")
        print("  cyris legacy <yaml_file> CONFIG # Run legacy command")
        print("  python main/cyris.py ...        # Use legacy interface directly")
        return
    
    # Detect if using modern commands
    modern_commands = {
        'create', 'list', 'destroy', 'rm', 'status', 'validate',
        'config-show', 'config-init', 'ssh-info', 'setup-permissions', 'legacy',
        '--help', '-h', '--version'
    }
    
    first_arg = args[0]
    
    # If first argument is a modern command, use modern CLI
    if first_arg in modern_commands:
        with open('/home/ubuntu/cyris/debug_main.log', 'a') as f:
            f.write(f"[DEBUG] Detected modern command: {first_arg}\n")
            f.write(f"[DEBUG] Args: {args}\n")
            f.flush()
        
        try:
            print(f"[DEBUG] Starting modern CLI with args: {args}")
            with open('/home/ubuntu/cyris/debug_main.log', 'a') as f:
                f.write("[DEBUG] Starting modern CLI try block\n")
                f.flush()
            
            script_dir = Path(__file__).parent.resolve()
            src_dir = script_dir / 'src'
            sys.path.insert(0, str(src_dir))
            print(f"[DEBUG] Added {src_dir} to Python path")
            
            with open('/home/ubuntu/cyris/debug_main.log', 'a') as f:
                f.write(f"[DEBUG] About to import from {src_dir}\n")
                f.flush()
            
            from cyris.cli.main import main as cli_main
            print("[DEBUG] Successfully imported CLI main")
            
            with open('/home/ubuntu/cyris/debug_main.log', 'a') as f:
                f.write("[DEBUG] Successfully imported CLI main\n")
                f.flush()
            
            sys.argv = ['cyris'] + args  # Reset argv
            print(f"[DEBUG] Set sys.argv to: {sys.argv}")
            print("[DEBUG] About to call cli_main()...")
            
            with open('/home/ubuntu/cyris/debug_main.log', 'a') as f:
                f.write(f"[DEBUG] About to call cli_main with argv: {sys.argv}\n")
                f.flush()
            
            cli_main()
            print("[DEBUG] cli_main() completed")
            
            with open('/home/ubuntu/cyris/debug_main.log', 'a') as f:
                f.write("[DEBUG] cli_main() completed successfully\n")
                f.flush()
        except ImportError:
            print("❌ Modern CLI unavailable, please ensure environment is properly set up")
            print("   Run: source .venv/bin/activate")
            sys.exit(1)
    
    # Otherwise detect legacy format: cyris <yaml_file> CONFIG
    elif len(args) >= 2 and args[1] in ['CONFIG', 'config'] or args[1].endswith('.ini'):
        # Legacy format, call legacy script
        import subprocess
        
        script_dir = Path(__file__).parent.resolve()
        legacy_script = script_dir / 'main' / 'cyris.py'
        
        if not legacy_script.exists():
            print(f"❌ Legacy script not found: {legacy_script}")
            sys.exit(1)
        
        cmd = ['python3', str(legacy_script)] + args
        try:
            result = subprocess.run(cmd, cwd=script_dir)
            sys.exit(result.returncode)
        except KeyboardInterrupt:
            print("\nOperation interrupted by user")
            sys.exit(1)
    
    else:
        # Unrecognized format, provide help
        print("❌ Unrecognized command format")
        print()
        print("Modern usage:")
        print("  cyris create examples/basic.yml")
        print("  cyris list")
        print("  cyris --help")
        print()
        print("Legacy usage:")
        print("  cyris examples/basic.yml CONFIG")
        print("  python main/cyris.py examples/basic.yml CONFIG")
        sys.exit(1)

if __name__ == '__main__':
    main()